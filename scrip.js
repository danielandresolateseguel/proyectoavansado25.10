// Esperar a que el DOM est√© completamente cargado
let backToTopForceVisibleUntil = 0; // Visibilidad forzada tras clic en c√≠rculos
document.addEventListener('DOMContentLoaded', function() {
    // Elementos del DOM
    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const resultsContainer = document.getElementById('results-container');
    const searchableItems = document.querySelectorAll('.searchable-item');
    const cartIcon = document.querySelector('.cart-icon');
    const cartCount = document.getElementById('cart-count');
    const shoppingCart = document.getElementById('shopping-cart');
    const closeCart = document.getElementById('close-cart');
    const cartItems = document.getElementById('cart-items');
    const cartTotalPrice = document.getElementById('cart-total-price');
    const checkoutBtn = document.getElementById('checkout-btn');
    const clearCartBtn = document.getElementById('clear-cart-btn');
    const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
    const clearSearchBtn = document.getElementById('clear-search-btn');
    const floatingCart = document.getElementById('floating-cart');
    const floatingCartCount = document.getElementById('floating-cart-count');

    // Crear overlay para cuando el carrito est√° abierto
    const overlay = document.createElement('div');
    overlay.className = 'overlay';
    document.body.appendChild(overlay);

    // Inicializar toggles de modalidad Mesa/Direcci√≥n
    const orderTypeRadios = document.querySelectorAll('input[name="orderType"]');
    const mesaFields = document.getElementById('order-mesa-fields');
    const addressFields = document.getElementById('order-address-fields');
    if (orderTypeRadios && mesaFields && addressFields) {
        orderTypeRadios.forEach(radio => {
            radio.addEventListener('change', () => {
                const isMesa = radio.value === 'mesa';
                mesaFields.style.display = isMesa ? 'block' : 'none';
                addressFields.style.display = isMesa ? 'none' : 'block';
            });
        });
        // Estado inicial
        mesaFields.style.display = 'block';
        addressFields.style.display = 'none';
    }

    // Configuraci√≥n por rubro/negocio (parametrizable desde HTML/JS)
    const CATEGORY = window.CATEGORY || document.body.getAttribute('data-category') || 'general';
    const VENDOR_ID = window.VENDOR_ID || document.body.getAttribute('data-vendor') || 'default';
    const WHATSAPP_NUMBER = window.WHATSAPP_NUMBER || '+5492615893590'; // sobrescribir en cada HTML
    const CART_STORAGE_KEY = window.CART_STORAGE_KEY || (`cart_${CATEGORY}_${VENDOR_ID}`);
    const CHECKOUT_MODE = window.CHECKOUT_MODE || (CATEGORY === 'servicios' ? 'whatsapp' : CATEGORY === 'comercio' ? 'envio' : CATEGORY === 'gastronomia' ? 'mesa' : 'general');
    console.info('Cart key:', CART_STORAGE_KEY, 'Mode:', CHECKOUT_MODE);

    // Etiquetas del bot√≥n de checkout seg√∫n modo
    if (checkoutBtn) {
        if (CHECKOUT_MODE === 'whatsapp') {
            checkoutBtn.textContent = 'üì± Enviar por WhatsApp';
        } else if (CHECKOUT_MODE === 'envio') {
            checkoutBtn.textContent = 'üöö Finalizar compra';
        } else if (CHECKOUT_MODE === 'mesa') {
            checkoutBtn.textContent = 'üçΩÔ∏è Realizar pedido';
        } else {
            checkoutBtn.textContent = 'üõí Finalizar';
        }
    }

    // Carrito de compras
    let cart = [];

    // Funcionalidad de deslizamiento para descuentos especiales en m√≥viles
    function initDiscountSwipe() {
        const discountsContainer = document.querySelector('.discounts-container');
        const discountsGrid = document.querySelector('.discounts-grid');
        
        if (!discountsContainer || !discountsGrid) return;
        
        let isDown = false;
        let startX;
        let scrollLeft;
        let startTime;
        let velocity = 0;
        
        // Eventos para mouse (desktop)
        discountsContainer.addEventListener('mousedown', (e) => {
            if (window.innerWidth > 768) return; // Solo en m√≥viles
            isDown = true;
            startX = e.pageX - discountsContainer.offsetLeft;
            scrollLeft = discountsContainer.scrollLeft;
            startTime = Date.now();
            discountsContainer.style.cursor = 'grabbing';
        });
        
        discountsContainer.addEventListener('mouseleave', () => {
            isDown = false;
            discountsContainer.style.cursor = 'grab';
        });
        
        discountsContainer.addEventListener('mouseup', () => {
            isDown = false;
            discountsContainer.style.cursor = 'grab';
            applyMomentum();
        });
        
        discountsContainer.addEventListener('mousemove', (e) => {
            if (!isDown || window.innerWidth > 768) return;
            e.preventDefault();
            const x = e.pageX - discountsContainer.offsetLeft;
            const walk = (x - startX) * 2;
            discountsContainer.scrollLeft = scrollLeft - walk;
            
            // Calcular velocidad para momentum
            const currentTime = Date.now();
            const timeDiff = currentTime - startTime;
            velocity = walk / timeDiff;
        });
        
        // Eventos para touch (m√≥viles)
        discountsContainer.addEventListener('touchstart', (e) => {
            isDown = true;
            startX = e.touches[0].pageX - discountsContainer.offsetLeft;
            scrollLeft = discountsContainer.scrollLeft;
            startTime = Date.now();
        });
        
        discountsContainer.addEventListener('touchmove', (e) => {
            if (!isDown) return;
            const x = e.touches[0].pageX - discountsContainer.offsetLeft;
            const walk = (x - startX) * 1.5;
            discountsContainer.scrollLeft = scrollLeft - walk;
            
            // Calcular velocidad para momentum
            const currentTime = Date.now();
            const timeDiff = currentTime - startTime;
            velocity = walk / timeDiff;
        });
        
        discountsContainer.addEventListener('touchend', () => {
            isDown = false;
            applyMomentum();
        });
        
        // Aplicar momentum al final del deslizamiento
        function applyMomentum() {
            if (Math.abs(velocity) > 0.5) {
                const momentum = velocity * 100;
                const targetScroll = discountsContainer.scrollLeft - momentum;
                
                discountsContainer.scrollTo({
                    left: Math.max(0, Math.min(targetScroll, discountsContainer.scrollWidth - discountsContainer.clientWidth)),
                    behavior: 'smooth'
                });
            }
        }
        
        // Agregar indicadores de scroll en m√≥viles
        if (window.innerWidth <= 768) {
            updateScrollIndicators();
            discountsContainer.addEventListener('scroll', updateScrollIndicators);
        }
        
        function updateScrollIndicators() {
            const container = discountsContainer;
            
            // Remover indicadores existentes (ya no los necesitamos)
            const existingIndicators = container.querySelectorAll('.scroll-indicator');
            existingIndicators.forEach(indicator => indicator.remove());
            
            // Ya no agregamos indicadores de texto que causan problemas
            // Los botones de navegaci√≥n ya proporcionan la funcionalidad necesaria
        }
    }
    
    // Inicializar funcionalidad de deslizamiento
    initDiscountSwipe();

    // Filtro de categor√≠as (gastronom√≠a)
    const categoryFilter = document.getElementById('category-filter');
    let selectedCategory = 'todos';

    function itemMatchesSelectedCategory(item) {
        const catAttr = (item.getAttribute('data-food-category') || '').toLowerCase();
        const categories = catAttr.split(',').map(c => c.trim());
        if (selectedCategory === 'todos') return true;
        if (selectedCategory === 'bebidas-cocteles') return categories.includes('bebidas') || categories.includes('cocteles');
        if (selectedCategory === 'al-plato') return !categories.includes('bebidas') && !categories.includes('cocteles');
        return categories.includes(selectedCategory);
    }

    function applyCategoryFilter() {
        const menuSection = document.getElementById('menu-gastronomia');
        searchableItems.forEach(item => {
            const isInMenuSection = menuSection && menuSection.contains(item);
            if (!isInMenuSection) {
                // No aplicar filtros fuera del men√∫ gastronom√≠a (ej. recomendados por inter√©s)
                item.style.display = '';
                return;
            }
            item.style.display = itemMatchesSelectedCategory(item) ? '' : 'none';
        });
    }

    if (categoryFilter) {
        const filterButtons = categoryFilter.querySelectorAll('.filter-btn');
        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                filterButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                selectedCategory = btn.getAttribute('data-filter') || 'todos';
                applyCategoryFilter();

                // Reaplicar b√∫squeda si est√° activa, respetando el filtro
                const searchTerm = searchInput.value.trim().toLowerCase();
                const searchResultsSection = document.querySelector('.search-results');
                if (searchTerm !== '' && searchResultsSection.classList.contains('active')) {
                    // Aplicar b√∫squeda incluyendo recomendados por inter√©s y filtrando solo el men√∫ gastronom√≠a
                    const menuSection = document.getElementById('menu-gastronomia');
                    const interestSection = document.querySelector('.interest-products');

                    const menuItemsForSearch = Array.from(searchableItems).filter(item => {
                        const isInMenuSection = menuSection && menuSection.contains(item);
                        return isInMenuSection && itemMatchesSelectedCategory(item);
                    });

                    const interestItemsForSearch = Array.from(searchableItems).filter(item => {
                        const isInInterestSection = interestSection && interestSection.contains(item);
                        return isInInterestSection;
                    });

                    const filteredItemsForSearch = [...menuItemsForSearch, ...interestItemsForSearch];
                    const results = performSearch(searchTerm, filteredItemsForSearch);
                    displayResults(results, searchTerm, resultsContainer);
                }
            });
        });

        // Aplicar filtro inicial
        applyCategoryFilter();
    }
    
    // Funci√≥n para escapar caracteres especiales en una expresi√≥n regular
    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    // Funci√≥n para resaltar el t√©rmino de b√∫squeda en un texto
    function highlightTerm(text, term) {
        // Crear una expresi√≥n regular para buscar el t√©rmino (insensible a may√∫sculas/min√∫sculas)
        const regex = new RegExp('(' + escapeRegExp(term) + ')', 'gi');
        
        // Reemplazar todas las ocurrencias del t√©rmino con una versi√≥n resaltada
        return text.replace(regex, '<span class="highlight">$1</span>');
    }
    
    // Funci√≥n para resaltar un elemento
    function highlightElement(element) {
        // Agregar clase para resaltar
        element.classList.add('highlight-element');
        
        // Desplazarse al elemento
        element.scrollIntoView({ behavior: 'smooth', block: 'start' });
        
        // Quitar la clase despu√©s de 2 segundos
        setTimeout(function() {
            element.classList.remove('highlight-element');
        }, 2000);
    }
    
    // Funci√≥n para extraer un fragmento de texto que contiene el t√©rmino de b√∫squeda
    function extractSnippet(text, term) {
        // Encontrar la posici√≥n del t√©rmino de b√∫squeda en el texto
        const termIndex = text.indexOf(term);
        
        // Determinar el inicio del fragmento (m√°ximo 50 caracteres antes del t√©rmino)
        const snippetStart = Math.max(0, termIndex - 50);
        
        // Determinar el final del fragmento (m√°ximo 50 caracteres despu√©s del t√©rmino)
        const snippetEnd = Math.min(text.length, termIndex + term.length + 50);
        
        // Extraer el fragmento
        let snippet = text.substring(snippetStart, snippetEnd);
        
        // Agregar puntos suspensivos si el fragmento no comienza desde el inicio del texto
        if (snippetStart > 0) {
            snippet = '...' + snippet;
        }
        
        // Agregar puntos suspensivos si el fragmento no termina al final del texto
        if (snippetEnd < text.length) {
            snippet = snippet + '...';
        }
        
        return snippet;
    }
    
    // Funci√≥n para realizar la b√∫squeda
    function performSearch(term, items) {
        const results = [];
        
        // Recorrer todos los elementos buscables
        items.forEach(item => {
            // Obtener el texto del elemento
            const itemText = item.textContent.toLowerCase();
            const itemId = item.id;
            const itemTitle = item.querySelector('h3').textContent;
            
            // Verificar si el texto contiene el t√©rmino de b√∫squeda
            if (itemText.includes(term)) {
                // Obtener informaci√≥n adicional del producto
                const productImage = item.querySelector('.product-image img');
                const productDescription = item.querySelector('.product-description');
                const productPrice = item.querySelector('.product-price');
                const addToCartBtn = item.querySelector('.add-to-cart-btn');
                
                // Extraer un fragmento de texto que contiene el t√©rmino de b√∫squeda
                const snippet = extractSnippet(itemText, term);
                
                // Agregar el resultado a la lista de resultados
                results.push({
                    id: itemId,
                    title: itemTitle,
                    snippet: snippet,
                    image: productImage ? productImage.src : '',
                    imageAlt: productImage ? productImage.alt : '',
                    description: productDescription ? productDescription.textContent : '',
                    price: productPrice ? productPrice.textContent : '',
                    productId: addToCartBtn ? addToCartBtn.getAttribute('data-id') : '',
                    productName: addToCartBtn ? addToCartBtn.getAttribute('data-name') : '',
                    productPrice: addToCartBtn ? addToCartBtn.getAttribute('data-price') : ''
                });
            }
        });
        
        return results;
    }
    
    // Funci√≥n para mostrar los resultados
    function displayResults(results, term, container) {
        // Limpiar el contenedor de resultados
        container.innerHTML = '';
        
        // Verificar si hay resultados
        if (results.length === 0) {
            // Mostrar mensaje de que no hay resultados
            container.innerHTML = '<p class="no-results">No se encontraron resultados para "' + term + '".</p>';
            return;
        }
        

        
        // Crear un elemento para cada resultado con dise√±o horizontal
        results.forEach(result => {
            // Crear el elemento del resultado con dise√±o horizontal
            const resultItem = document.createElement('div');
            resultItem.className = 'search-result-item';
            
            // Crear la imagen del producto
            const resultImageContainer = document.createElement('div');
            resultImageContainer.className = 'search-result-image';
            
            if (result.image) {
                const resultImage = document.createElement('img');
                resultImage.src = result.image;
                resultImage.alt = result.imageAlt;
                resultImage.loading = 'lazy';
                resultImageContainer.appendChild(resultImage);
            } else {
                // Placeholder si no hay imagen
                const placeholder = document.createElement('div');
                placeholder.className = 'image-placeholder';
                placeholder.innerHTML = '<i class="fas fa-image"></i>';
                resultImageContainer.appendChild(placeholder);
            }
            
            // Crear el contenedor de informaci√≥n del producto
            const resultInfo = document.createElement('div');
            resultInfo.className = 'search-result-info';
            
            // Crear el t√≠tulo del resultado
            const resultTitle = document.createElement('h3');
            resultTitle.className = 'search-result-title';
            resultTitle.innerHTML = highlightTerm(result.title, term);
            
            // Crear la descripci√≥n del producto
            const resultDescription = document.createElement('p');
            resultDescription.className = 'search-result-description';
            resultDescription.innerHTML = highlightTerm(result.description, term);
            
            // Crear el precio del producto
            const resultPrice = document.createElement('p');
            resultPrice.className = 'search-result-price';
            resultPrice.innerHTML = highlightTerm(result.price, term);
            
            // Agregar elementos al contenedor de informaci√≥n
            resultInfo.appendChild(resultTitle);
            resultInfo.appendChild(resultDescription);
            resultInfo.appendChild(resultPrice);
            
            // Crear el contenedor de acciones
            const resultActions = document.createElement('div');
            resultActions.className = 'search-result-actions';
            
            // Crear bot√≥n de agregar al carrito
            if (result.productId) {
                const addToCartBtn = document.createElement('button');
                addToCartBtn.className = 'search-add-to-cart-btn';
                addToCartBtn.innerHTML = '<i class="fas fa-cart-plus"></i> Agregar';
                addToCartBtn.setAttribute('data-id', result.productId);
                addToCartBtn.setAttribute('data-name', result.productName);
                addToCartBtn.setAttribute('data-price', result.productPrice);
                
                // Event listener para agregar al carrito
                addToCartBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const productId = this.getAttribute('data-id');
                    const productName = this.getAttribute('data-name');
                    const productPrice = this.getAttribute('data-price');
                    
                    // Convertir el precio a n√∫mero (viene como string sin formato)
                    const priceNumber = parseInt(productPrice);
                    
                    // Llamar a addToCart con los par√°metros correctos
                    addToCart(productId, productName, priceNumber, result.image, e);
                    
                    // Feedback visual
                    this.innerHTML = '<i class="fas fa-check"></i> Agregado';
                    this.style.backgroundColor = '#28a745';
                    setTimeout(() => {
                        this.innerHTML = '<i class="fas fa-cart-plus"></i> Agregar';
                        this.style.backgroundColor = '';
                    }, 2000);
                });
                
                resultActions.appendChild(addToCartBtn);
            }
            
            // Crear enlace para ver m√°s detalles
            const resultLink = document.createElement('button');
            resultLink.className = 'search-view-more-btn';
            resultLink.innerHTML = '<i class="fas fa-eye"></i> Ver m√°s';
            resultLink.addEventListener('click', function(event) {
                event.preventDefault();
                
                // Ocultar los resultados
                const searchResultsSection = document.querySelector('.search-results');
                searchResultsSection.classList.remove('active');
                
                // Resaltar el elemento encontrado
                const targetElement = document.getElementById(result.id);
                if (targetElement) {
                    highlightElement(targetElement);
                    // Scroll suave al elemento
                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            });
            
            resultActions.appendChild(resultLink);
            
            // Ensamblar el resultado completo
            resultItem.appendChild(resultImageContainer);
            resultItem.appendChild(resultInfo);
            resultItem.appendChild(resultActions);
            
            // Agregar el resultado al contenedor
            container.appendChild(resultItem);
        });
    }
    
    // Cargar carrito desde localStorage si existe
    function loadCart() {
        const savedCart = localStorage.getItem(CART_STORAGE_KEY);
        if (savedCart) {
            cart = JSON.parse(savedCart);
            updateCartCount();
        }
    }
    
    // Guardar carrito en localStorage
    function saveCart() {
        localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
    }
    
    // Actualizar contador del carrito
    function updateCartCount() {
        const totalItems = cart.reduce((total, item) => total + item.quantity, 0);
        cartCount.textContent = totalItems;
        floatingCartCount.textContent = totalItems;
        
        // Mostrar u ocultar el carrito flotante seg√∫n si hay productos
        if (totalItems > 0) {
            floatingCart.classList.add('show');
        } else {
            floatingCart.classList.remove('show');
        }
    }
    
    // Actualizar la visualizaci√≥n del carrito
    function updateCartDisplay() {
        // Limpiar el contenedor de elementos del carrito
        cartItems.innerHTML = '';
        
        // Verificar si el carrito est√° vac√≠o
        if (cart.length === 0) {
            cartItems.innerHTML = '<p class="empty-cart">Tu carrito est√° vac√≠o</p>';
            cartTotalPrice.textContent = '$0 ARS';
            return;
        }
        
        // Variable para el precio total
        let totalPrice = 0;
        
        // Crear un elemento para cada producto en el carrito
        cart.forEach(item => {
            // Crear el elemento del producto
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.setAttribute('data-id', item.id);
            
            // Crear la imagen del producto
            const itemImage = document.createElement('div');
            itemImage.className = 'cart-item-image';
            if (item.image) {
                const img = document.createElement('img');
                img.src = item.image;
                img.alt = item.name;
                img.loading = 'lazy';
                itemImage.appendChild(img);
            }
            
            // Crear contenedor de informaci√≥n del producto
            const itemInfo = document.createElement('div');
            itemInfo.className = 'cart-item-info';
            
            // Crear el nombre del producto
            const itemName = document.createElement('div');
            itemName.className = 'cart-item-name';
            itemName.textContent = item.name;
            
            // Crear el precio del producto
            const itemPrice = document.createElement('div');
            itemPrice.className = 'cart-item-price';
            itemPrice.textContent = '$' + parseInt(item.price).toLocaleString('es-AR') + ' ARS';
            
            // Crear el contenedor para la cantidad
            const itemQuantityContainer = document.createElement('div');
            itemQuantityContainer.className = 'cart-item-quantity-container';
            
            // Crear el bot√≥n para disminuir la cantidad
            const decreaseBtn = document.createElement('button');
            decreaseBtn.className = 'quantity-btn decrease';
            decreaseBtn.textContent = '-';
            decreaseBtn.addEventListener('click', function() {
                // Disminuir la cantidad del producto
                if (item.quantity > 1) {
                    item.quantity--;
                } else {
                    // Eliminar el producto si la cantidad es 1
                    const itemIndex = cart.findIndex(cartItem => cartItem.id === item.id);
                    if (itemIndex !== -1) {
                        cart.splice(itemIndex, 1);
                    }
                }
                
                // Actualizar el carrito
                saveCart();
                updateCartDisplay();
                updateCartCount();
            });
            
            // Crear el elemento para mostrar la cantidad
            const itemQuantity = document.createElement('span');
            itemQuantity.className = 'cart-item-quantity';
            itemQuantity.textContent = item.quantity;
            
            // Crear el bot√≥n para aumentar la cantidad
            const increaseBtn = document.createElement('button');
            increaseBtn.className = 'quantity-btn increase';
            increaseBtn.textContent = '+';
            increaseBtn.addEventListener('click', function() {
                // Aumentar la cantidad del producto
                item.quantity++;
                
                // Actualizar el carrito
                saveCart();
                updateCartDisplay();
                updateCartCount();
            });
            
            // Agregar los botones y la cantidad al contenedor
            itemQuantityContainer.appendChild(decreaseBtn);
            itemQuantityContainer.appendChild(itemQuantity);
            itemQuantityContainer.appendChild(increaseBtn);
            
            // Crear el bot√≥n para eliminar el producto
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-item-btn';
            removeBtn.innerHTML = '&times;';
            removeBtn.addEventListener('click', function() {
                // Eliminar el producto del carrito
                const itemIndex = cart.findIndex(cartItem => cartItem.id === item.id);
                if (itemIndex !== -1) {
                    cart.splice(itemIndex, 1);
                }
                
                // Actualizar el carrito
                saveCart();
                updateCartDisplay();
                updateCartCount();
            });
            
            // Agregar elementos al contenedor de informaci√≥n
            itemInfo.appendChild(itemName);
            itemInfo.appendChild(itemPrice);
            itemInfo.appendChild(itemQuantityContainer);
            
            // Agregar los elementos al elemento del producto
            cartItem.appendChild(itemImage);
            cartItem.appendChild(itemInfo);
            cartItem.appendChild(removeBtn);
            
            // Agregar el elemento del producto al contenedor
            cartItems.appendChild(cartItem);
            
            // Actualizar el precio total
            totalPrice += item.price * item.quantity;
        });
        
        // Actualizar el precio total
         cartTotalPrice.textContent = '$' + parseInt(totalPrice).toLocaleString('es-AR') + ' ARS';
         
         // No necesitamos mostrar m√©todos de pago ya que se env√≠a por WhatsApp
    }
    
    // Funci√≥n para a√±adir un producto al carrito
    function addToCart(id, name, price, imageSrc, event) {
        // Verificar si el producto ya est√° en el carrito
        const existingItem = cart.find(item => item.id === id);
        
        if (existingItem) {
            // Incrementar la cantidad si el producto ya est√° en el carrito
            existingItem.quantity++;
        } else {
            // Agregar el producto al carrito si no est√°
            cart.push({
                id: id,
                name: name,
                price: price,
                image: imageSrc,
                quantity: 1
            });
        }
        
        // Actualizar el carrito
        saveCart();
        updateCartDisplay();
        updateCartCount();
        
        // Mostrar animaci√≥n de a√±adir al carrito
        if (event) {
            showAddToCartAnimation(event);
            
            // Mostrar indicador visual en el bot√≥n
            const button = event.currentTarget;
            showAddedToCartIndicator(button);
        }
    }
    
    // Funci√≥n para vaciar el carrito
    function clearCart() {
        // Vaciar el array del carrito
        cart = [];
        
        // Actualizar el carrito
        saveCart();
        updateCartDisplay();
        updateCartCount();
    }
    
    // Funci√≥n para mostrar la animaci√≥n de a√±adir al carrito
    function showAddToCartAnimation(event) {
        // Crear un elemento para la animaci√≥n
        const animationElement = document.createElement('div');
        animationElement.className = 'add-to-cart-animation';
        
        // Obtener coordenadas del evento (compatible con touch y mouse)
        let clientX, clientY;
        if (event.touches && event.touches.length > 0) {
            clientX = event.touches[0].clientX;
            clientY = event.touches[0].clientY;
        } else if (event.changedTouches && event.changedTouches.length > 0) {
            clientX = event.changedTouches[0].clientX;
            clientY = event.changedTouches[0].clientY;
        } else {
            clientX = event.clientX || event.target.getBoundingClientRect().left + event.target.offsetWidth / 2;
            clientY = event.clientY || event.target.getBoundingClientRect().top + event.target.offsetHeight / 2;
        }
        
        // Posicionar el elemento en la posici√≥n del clic/touch
        animationElement.style.left = clientX + 'px';
        animationElement.style.top = clientY + 'px';
        
        // Agregar el elemento al body
        document.body.appendChild(animationElement);
        
        // Obtener la posici√≥n del icono del carrito
        const cartIconRect = cartIcon.getBoundingClientRect();
        const cartIconX = cartIconRect.left + cartIconRect.width / 2;
        const cartIconY = cartIconRect.top + cartIconRect.height / 2;
        
        // Usar requestAnimationFrame para mejor rendimiento
        requestAnimationFrame(() => {
            // Animar el elemento hacia el icono del carrito
            animationElement.style.transition = 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            animationElement.style.left = cartIconX + 'px';
            animationElement.style.top = cartIconY + 'px';
            animationElement.style.opacity = '0';
            animationElement.style.transform = 'scale(0.1)';
        });
        
        // Eliminar el elemento despu√©s de la animaci√≥n
        setTimeout(function() {
            if (animationElement.parentNode) {
                document.body.removeChild(animationElement);
            }
        }, 600);
    }
    
    // Funci√≥n para mostrar indicador visual en el bot√≥n de a√±adir al carrito
    function showAddedToCartIndicator(button) {
        // Guardar el texto original del bot√≥n
        const originalText = button.textContent;
        
        // Cambiar el texto y estilo del bot√≥n
        button.textContent = '¬°A√±adido!';
        button.classList.add('added-to-cart');
        
        // Restaurar el bot√≥n despu√©s de 1.5 segundos
        setTimeout(function() {
            button.textContent = originalText;
            button.classList.remove('added-to-cart');
        }, 1500);
    }
    
    // Estilo para resaltar elementos
    const style = document.createElement('style');
    style.textContent = `
        .highlight {
            color: #007bff;
            font-weight: 600;
            background-color: rgba(0, 123, 255, 0.1);
            padding: 2px 4px;
            border-radius: 3px;
            border-bottom: 2px solid #007bff;
        }
        
        .highlight-element {
            animation: highlight-pulse 2s;
        }
        
        @keyframes highlight-pulse {
            0% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(0, 123, 255, 0); }
            100% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0); }
        }
        
        .added-to-cart {
            background-color: #4CAF50 !important;
            color: white !important;
            animation: pulse-green 1.5s;
        }
        
        @keyframes pulse-green {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    `;
    document.head.appendChild(style);
    
    // Eventos para el carrito de compras
    
    // Abrir carrito al hacer clic en el icono
    cartIcon.addEventListener('click', function() {
        shoppingCart.classList.add('active');
        overlay.classList.add('active');
        // Ocultar carrito flotante cuando se abre el carrito principal
        if (floatingCart) {
            floatingCart.classList.remove('show');
        }
    });
    
    // Abrir carrito al hacer clic en el carrito flotante
    if (floatingCart) {
        floatingCart.addEventListener('click', function() {
            shoppingCart.classList.add('active');
            overlay.classList.add('active');
            // Ocultar carrito flotante cuando se abre el carrito principal
            floatingCart.classList.remove('show');
        });
    }
    
    // Cerrar carrito al hacer clic en el bot√≥n de cerrar
    closeCart.addEventListener('click', function() {
        shoppingCart.classList.remove('active');
        overlay.classList.remove('active');
        // Mostrar carrito flotante si hay productos
        if (floatingCart && cart.length > 0) {
            floatingCart.classList.add('show');
        }
    });
    
    // Cerrar carrito al hacer clic en el overlay
    overlay.addEventListener('click', function() {
        shoppingCart.classList.remove('active');
        overlay.classList.remove('active');
        // Mostrar carrito flotante si hay productos
        if (floatingCart && cart.length > 0) {
            floatingCart.classList.add('show');
        }
    });
    
    // Evento para los botones de a√±adir al carrito
    addToCartButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            const id = this.getAttribute('data-id');
            const name = this.getAttribute('data-name');
            const price = parseFloat(this.getAttribute('data-price'));
            
            // Obtener la imagen del producto usando el atributo src original
            const productCard = this.closest('.product-card');
            const productImage = productCard.querySelector('.product-image img');
            let imageSrc = '';
            if (productImage) {
                // Obtener solo la ruta relativa de la imagen
                const fullSrc = productImage.getAttribute('src');
                imageSrc = fullSrc;
            }
            
            addToCart(id, name, price, imageSrc, event);
        });
    });
    
    // Evento para el bot√≥n de vaciar carrito
    clearCartBtn.addEventListener('click', clearCart);
    
    // Evento para el bot√≥n de enviar por WhatsApp
    checkoutBtn.addEventListener('click', function() {
        if (cart.length === 0) {
            alert('Tu carrito est√° vac√≠o');
            return;
        }

        // Obtener modalidad de pedido y datos adicionales
        const orderTypeEl = document.querySelector('input[name="orderType"]:checked');
        const orderType = orderTypeEl ? orderTypeEl.value : (CHECKOUT_MODE === 'mesa' ? 'mesa' : 'direccion');
        const mesaNumberEl = document.getElementById('mesa-number');
        const addressEl = document.getElementById('delivery-address');
        const mesaNumber = mesaNumberEl ? (mesaNumberEl.value || '').trim() : '';
        const address = addressEl ? (addressEl.value || '').trim() : '';

        if (orderType === 'mesa' && !mesaNumber) {
            alert('Por favor, ingresa el n√∫mero de mesa.');
            return;
        }
        if (orderType === 'direccion' && !address) {
            alert('Por favor, ingresa la direcci√≥n de entrega.');
            return;
        }
        
        // Crear el mensaje de WhatsApp
        let mensaje = '¬°Hola! üëã Espero que est√©s muy bien.\n\n';
        mensaje += 'üõí Me gustar√≠a realizar el siguiente pedido:\n\n';

        // Modalidad de pedido
        mensaje += `üìç Modalidad: ${orderType === 'mesa' ? 'Mesa' : 'Direcci√≥n'}\n`;
        if (orderType === 'mesa') {
            mensaje += `   ü™ë Mesa N¬∞: ${mesaNumber}\n\n`;
        } else {
            mensaje += `   üè† Direcci√≥n: ${address}\n\n`;
        }
        
        // Agregar cada producto del carrito
        cart.forEach((item, index) => {
            const precioFormateado = '$' + parseInt(item.price).toLocaleString('es-AR') + ' ARS';
            mensaje += `${index + 1}. üì¶ ${item.name}\n`;
            mensaje += `   üìä Cantidad: ${item.quantity}\n`;
            mensaje += `   üíµ Precio unitario: ${precioFormateado}\n`;
            mensaje += `   üí∞ Subtotal: $${parseInt(item.price * item.quantity).toLocaleString('es-AR')} ARS\n`;
            mensaje += '\n';
        });
        
        // Agregar el total y sugerencia de propina si corresponde
        const totalNumber = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const totalText = '$' + parseInt(totalNumber).toLocaleString('es-AR') + ' ARS';
        mensaje += `üí∞ TOTAL (sin propina): ${totalText}\n`;
        if (orderType === 'mesa') {
            const tip = Math.round(totalNumber * 0.10);
            const tipText = '$' + parseInt(tip).toLocaleString('es-AR') + ' ARS';
            const totalWithTip = totalNumber + tip;
            const totalWithTipText = '$' + parseInt(totalWithTip).toLocaleString('es-AR') + ' ARS';
            mensaje += `üíÅ Propina sugerida (10%): ${tipText}\n`;
            mensaje += `üçΩÔ∏è TOTAL con propina sugerida: ${totalWithTipText}\n\n`;
        } else {
            mensaje += `\n`;
        }
        if (orderType !== 'mesa') {
            mensaje += '¬øPodr√≠as confirmarme la disponibilidad y el m√©todo de entrega?\n\n';
        }
        mensaje += '¬°Muchas gracias! üòä';
        
        // Codificar el mensaje para URL
        const mensajeCodificado = encodeURIComponent(mensaje);
        
        // Crear el enlace de WhatsApp (puedes cambiar el n√∫mero por el tuyo)
        const urlWhatsApp = `https://wa.me/${WHATSAPP_NUMBER}?text=${mensajeCodificado}`;
        
        // Abrir WhatsApp
        window.open(urlWhatsApp, '_blank');
        
        // Limpiar el carrito despu√©s de enviar
        clearCart();
        shoppingCart.classList.remove('active');
        overlay.classList.remove('active');
    });
    
    // Escuchar el evento de env√≠o del formulario de b√∫squeda
    searchForm.addEventListener('submit', function(event) {
        // Prevenir el comportamiento predeterminado del formulario
        event.preventDefault();
        
        // Obtener el t√©rmino de b√∫squeda y eliminar espacios en blanco al inicio y final
        const searchTerm = searchInput.value.trim().toLowerCase();
        
        // Obtener la secci√≥n de resultados
        const searchResultsSection = document.querySelector('.search-results');
        
        // Verificar si el t√©rmino de b√∫squeda est√° vac√≠o
        if (searchTerm === '') {
            // Ocultar la secci√≥n de resultados
            searchResultsSection.classList.remove('active');
            // Mostrar mensaje de que no hay resultados
            resultsContainer.innerHTML = '<p class="no-results">Por favor, ingresa un t√©rmino de b√∫squeda.</p>';
            return;
        }
        
        // Mostrar la secci√≥n de resultados
        searchResultsSection.classList.add('active');
        
        // Realizar la b√∫squeda incluyendo recomendados por inter√©s, y aplicar filtro solo al men√∫ gastronom√≠a
        const menuSection = document.getElementById('menu-gastronomia');
        const interestSection = document.querySelector('.interest-products');

        const menuItemsForSearch = Array.from(searchableItems).filter(item => {
            const isInMenuSection = menuSection && menuSection.contains(item);
            return isInMenuSection && itemMatchesSelectedCategory(item);
        });

        const interestItemsForSearch = Array.from(searchableItems).filter(item => {
            const isInInterestSection = interestSection && interestSection.contains(item);
            return isInInterestSection;
        });

        const filteredItemsForSearch = [...menuItemsForSearch, ...interestItemsForSearch];
        const results = performSearch(searchTerm, filteredItemsForSearch);
        
        // Mostrar los resultados
        displayResults(results, searchTerm, resultsContainer);
        
        // Mostrar el bot√≥n de limpiar b√∫squeda
        clearSearchBtn.style.display = 'inline-block';
    });
    
    // Escuchar cambios en el campo de b√∫squeda para ocultar resultados cuando est√© vac√≠o
    searchInput.addEventListener('input', function() {
        const searchResultsSection = document.querySelector('.search-results');
        if (searchInput.value.trim() === '') {
            searchResultsSection.classList.remove('active');
            clearSearchBtn.style.display = 'none';
        }
    });
    
    // Funcionalidad del bot√≥n limpiar b√∫squeda
    clearSearchBtn.addEventListener('click', function() {
        // Limpiar el campo de b√∫squeda
        searchInput.value = '';
        
        // Ocultar la secci√≥n de resultados
        const searchResultsSection = document.querySelector('.search-results');
        searchResultsSection.classList.remove('active');
        
        // Ocultar el bot√≥n de limpiar
        clearSearchBtn.style.display = 'none';
        
        // Limpiar el contenedor de resultados
        resultsContainer.innerHTML = '';
        
        // Enfocar el campo de b√∫squeda
        searchInput.focus();
    });
    
    // Funcionalidad del modal de producto
    const productModal = document.getElementById('product-modal');
    const modalProductImage = document.getElementById('modal-product-image');
    const modalProductTitle = document.getElementById('modal-product-title');
    const modalProductDescription = document.getElementById('modal-product-description');
    const modalProductFeatures = document.getElementById('modal-product-features');
    const modalProductPrice = document.getElementById('modal-product-price');
    const modalAddToCartBtn = document.getElementById('modal-add-to-cart-btn');
    const closeModal = document.querySelector('.close-modal');

    // Algunas p√°ginas no incluyen el modal; continuar sin error
    // if (!productModal) {
    //     console.debug('P√°gina sin modal de producto');
    // }

    // Datos detallados de productos
    const productDetails = {
        1: {
            features: [
                'Pantalla AMOLED de 6.5" con resoluci√≥n 2400x1080',
                'C√°mara principal de 108MP con estabilizaci√≥n √≥ptica',
                'Bater√≠a de 5000mAh con carga r√°pida de 65W',
                'Procesador Snapdragon 8 Gen 2',
                '8GB de RAM y 256GB de almacenamiento',
                'Resistente al agua IP68',
                'Conectividad 5G y WiFi 6'
            ]
        },
        2: {
            features: [
                'Procesador Intel Core i7 de 12va generaci√≥n',
                '16GB de RAM DDR5 expandible hasta 32GB',
                'SSD NVMe de 512GB de alta velocidad',
                'Pantalla de 14" Full HD con tecnolog√≠a IPS',
                'Tarjeta gr√°fica integrada Intel Iris Xe',
                'Bater√≠a de hasta 12 horas de duraci√≥n',
                'Peso ultraligero de solo 1.2kg'
            ]
        },
        3: {
            features: [
                'Cancelaci√≥n activa de ruido adaptativa',
                'Hasta 30 horas de reproducci√≥n con estuche',
                'Drivers de 40mm para sonido de alta fidelidad',
                'Conectividad Bluetooth 5.3 con codec aptX',
                'Carga r√°pida: 15 min = 3 horas de m√∫sica',
                'Resistentes al sudor y agua IPX4',
                'Control t√°ctil intuitivo'
            ]
        },
        4: {
            features: [
                'Monitor de ritmo card√≠aco 24/7',
                'GPS integrado para seguimiento de rutas',
                'M√°s de 20 modos deportivos predefinidos',
                'Pantalla AMOLED de 1.4" siempre activa',
                'Bater√≠a de hasta 14 d√≠as de duraci√≥n',
                'Resistente al agua hasta 50 metros',
                'Monitoreo del sue√±o y estr√©s'
            ]
        },
        5: {
            features: [
                'Pantalla IPS de 10.5" con resoluci√≥n 2K',
                'Procesador octa-core de alto rendimiento',
                '128GB de almacenamiento expandible',
                '6GB de RAM para multitarea fluida',
                'C√°maras de 13MP trasera y 8MP frontal',
                'Bater√≠a de 8000mAh con carga r√°pida',
                'Soporte para stylus incluido'
            ]
        },
        6: {
            features: [
                'Sensor CMOS de 24.2MP de formato completo',
                'Grabaci√≥n de video 4K a 60fps',
                'Sistema de enfoque autom√°tico de 693 puntos',
                'Estabilizaci√≥n de imagen en 5 ejes',
                'Pantalla LCD t√°ctil de 3.2" articulada',
                'Conectividad WiFi y Bluetooth integrada',
                'Bater√≠a de larga duraci√≥n (hasta 610 fotos)'
            ]
        },
        7: {
            features: [
                'Consola de nueva generaci√≥n con 1TB de almacenamiento',
                'Procesador AMD Zen 2 de 8 n√∫cleos',
                'GPU personalizada RDNA 2 con ray tracing',
                'Soporte para resoluci√≥n 4K y 120fps',
                'SSD ultra r√°pido para tiempos de carga m√≠nimos',
                'Retrocompatibilidad con miles de juegos',
                'Control inal√°mbrico con retroalimentaci√≥n h√°ptica'
            ]
        },
        8: {
            features: [
                'Pantalla OLED de 55" con tecnolog√≠a 4K HDR',
                'Procesador Œ±9 Gen 5 AI con Deep Learning',
                'Dolby Vision IQ y Dolby Atmos integrados',
                'webOS 22 con asistente de voz ThinQ AI',
                'HDMI 2.1 para gaming a 120Hz',
                'Dise√±o ultra delgado Gallery Design',
                'Certificaci√≥n NVIDIA G-SYNC Compatible'
            ]
        },
        9: {
            features: [
                'Refrigerador No Frost de 350 litros',
                'Tecnolog√≠a Twin Cooling Plus',
                'Dispensador de agua y hielo autom√°tico',
                'Control de temperatura digital preciso',
                'Cajones FreshZone para frutas y verduras',
                'Eficiencia energ√©tica clase A++',
                'Garant√≠a extendida de 10 a√±os en compresor'
            ]
        },
        10: {
            features: [
                'Capacidad de 8kg para familias grandes',
                '14 programas de lavado especializados',
                'Tecnolog√≠a EcoBubble para lavado eficiente',
                'Motor Digital Inverter ultra silencioso',
                'Funci√≥n de vapor para eliminar bacterias',
                'Pantalla LED con temporizador',
                'Garant√≠a de 20 a√±os en motor'
            ]
        }
    };

    // Funci√≥n simple para mostrar el modal
    function showModal(productData) {
        if (!productModal) return;
        
        if (modalProductImage) modalProductImage.src = productData.imageSrc;
        if (modalProductTitle) modalProductTitle.textContent = productData.name;
        if (modalProductDescription) modalProductDescription.textContent = productData.description;
        if (modalProductPrice) modalProductPrice.textContent = '$' + parseInt(productData.price).toLocaleString('es-AR') + ' ARS';
        
        // Limpiar caracter√≠sticas anteriores
        if (modalProductFeatures) modalProductFeatures.innerHTML = '';
        
        // Agregar caracter√≠sticas si existen
        if (modalProductFeatures && productDetails[productData.id] && productDetails[productData.id].features) {
            productDetails[productData.id].features.forEach(feature => {
                const li = document.createElement('li');
                li.textContent = feature;
                modalProductFeatures.appendChild(li);
            });
        }
        
        // Configurar bot√≥n del modal
        if (modalAddToCartBtn) {
            modalAddToCartBtn.setAttribute('data-id', productData.id);
            modalAddToCartBtn.setAttribute('data-name', productData.name);
            modalAddToCartBtn.setAttribute('data-price', productData.price.replace(/[^0-9]/g, ''));
        }
        
        // Mostrar modal
        productModal.style.display = 'flex';
        productModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }
    
    // Agregar event listeners a las im√°genes de productos
    const productCards = document.querySelectorAll('.product-card');
    
    productCards.forEach((card) => {
        card.style.cursor = 'pointer';
        
        // Evento click simple para todos los dispositivos
        card.addEventListener('click', function(e) {
            // Evitar que se active si se hace click en el bot√≥n de a√±adir al carrito
            if (e.target.classList.contains('add-to-cart-btn')) {
                return;
            }
            
            // Obtener informaci√≥n del producto de forma segura
            const productCard = this;
            const addToCartBtn = productCard.querySelector('.add-to-cart-btn');
            if (!addToCartBtn) {
                console.debug('Tarjeta sin bot√≥n add-to-cart, se omite modal');
                return;
            }
            const productId = addToCartBtn.getAttribute('data-id') || '';
            const productName = addToCartBtn.getAttribute('data-name') || '';
            const productPrice = addToCartBtn.getAttribute('data-price') || '0';
            const descEl = productCard.querySelector('.product-description');
            const productDescription = descEl ? descEl.textContent : '';
            const imgEl = productCard.querySelector('.product-image img');
            const productImageSrc = imgEl ? imgEl.src : '';
            
            // Crear objeto con datos del producto
            const productData = {
                id: productId,
                name: productName,
                price: productPrice,
                description: productDescription,
                imageSrc: productImageSrc
            };
            
            // Mostrar modal
            showModal(productData);
        });
    });

    // Cerrar modal
    function closeProductModal() {
        productModal.classList.remove('active');
        productModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    if (closeModal) {
        closeModal.addEventListener('click', closeProductModal);
    }

    // Cerrar modal al hacer clic fuera del contenido
    if (productModal) {
        productModal.addEventListener('click', function(e) {
            if (e.target === productModal) {
                closeProductModal();
            }
        });
    }

    // Cerrar modal con la tecla Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && productModal && productModal.classList.contains('active')) {
            closeProductModal();
        }
    });

    // Funcionalidad del bot√≥n agregar al carrito del modal
    if (modalAddToCartBtn) {
        modalAddToCartBtn.addEventListener('click', function(event) {
        const productId = this.getAttribute('data-id');
        const productName = this.getAttribute('data-name');
        const productPrice = parseInt(this.getAttribute('data-price'));
        
        // Obtener la imagen del modal
        const modalImage = document.getElementById('modal-product-image');
        const imageSrc = modalImage ? modalImage.src : '';
        
        addToCart(productId, productName, productPrice, imageSrc);
        
        // Mostrar indicador visual en el bot√≥n
        showAddedToCartIndicator(this);
        
        // Mostrar animaci√≥n de √©xito
        showAddToCartAnimation(event);
        
        // Cerrar modal despu√©s de un breve delay para que se vea el feedback
        setTimeout(() => {
            closeProductModal();
        }, 800);
        });
    }

    // Cargar carrito al iniciar
    loadCart();
    updateCartDisplay();
    
    // Variables del carrusel
    let currentSlideIndex = 0;
    let carouselInterval;
    let isDragging = false;
    let isAutoPlayActive = true;
    let autoPlayDuration = 5000; // 5 segundos (valor fijo)
    let isCarouselVisible = true;
    let wasAutoPlayActiveBeforeHidden = false;
    let progressInterval;
    let progressStartTime;
    
    // Funciones del carrusel
    function initializeCarousel() {
        const carouselContainer = document.querySelector('.carousel-container');
        if (!carouselContainer) return;
        
        const slides = document.querySelectorAll('.carousel-slide');
        const indicators = document.querySelectorAll('.indicator');
        const prevBtn = document.querySelector('.carousel-prev');
        const nextBtn = document.querySelector('.carousel-next');
        
        if (slides.length === 0) return;
        
        // Eventos de los botones
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                previousSlide();
                resetCarouselInterval();
            });
        }
        
        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                nextSlide();
                resetCarouselInterval();
            });
        }
        
        // Eventos de los indicadores
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => {
                goToSlide(index);
                resetCarouselInterval();
            });
        });
        
        // Auto-play del carrusel
        startCarouselInterval();
        
        // Pausar auto-play al hacer hover (solo si est√° activo)
        carouselContainer.addEventListener('mouseenter', () => {
            if (isAutoPlayActive) {
                stopCarouselInterval();
            }
        });
        
        carouselContainer.addEventListener('mouseleave', () => {
            if (isAutoPlayActive) {
                startCarouselInterval();
            }
        });
        
        // Pausar auto-play en eventos t√°ctiles
        carouselContainer.addEventListener('touchstart', () => {
            if (isAutoPlayActive) {
                stopCarouselInterval();
            }
        });
        
        carouselContainer.addEventListener('touchend', () => {
            if (isAutoPlayActive) {
                // Reanudar despu√©s de un breve delay para evitar conflictos
                setTimeout(() => {
                    if (isAutoPlayActive) {
                        startCarouselInterval();
                    }
                }, 1000);
            }
        });
        
        // Pausar auto-play cuando se hace clic en indicadores
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => {
                if (isAutoPlayActive) {
                    stopCarouselInterval();
                    // Reanudar despu√©s de 3 segundos
                    setTimeout(() => {
                        if (isAutoPlayActive) {
                            startCarouselInterval();
                        }
                    }, 3000);
                }
            });
        });
        
        // Soporte para navegaci√≥n con teclado
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                previousSlide();
                resetCarouselInterval();
            } else if (e.key === 'ArrowRight') {
                nextSlide();
                resetCarouselInterval();
            }
        });
        
        // Soporte para deslizamiento t√°ctil natural en m√≥viles
        let touchStartX = 0;
        let touchCurrentX = 0;
        let isDragging = false;
        let startTransform = 0;
        const slidesContainer = carouselContainer.querySelector('.carousel-slides');
        
        carouselContainer.addEventListener('touchstart', (e) => {
            touchStartX = e.changedTouches[0].screenX;
            touchCurrentX = touchStartX;
            isDragging = true;
            
            // Usar directamente el √≠ndice actual para evitar inconsistencias
            startTransform = -currentSlideIndex * (100/3);
            
            stopCarouselInterval();
            // Eliminar completamente las transiciones durante gestos t√°ctiles
            slidesContainer.style.transition = 'none';
            
            // Feedback visual: reducir ligeramente la escala del carrusel
            carouselContainer.style.transform = 'scale(0.98)';
            carouselContainer.style.transition = 'transform 0.2s ease';
        }, { passive: true });
        
        carouselContainer.addEventListener('touchmove', (e) => {
            if (!isDragging) return;
            
            touchCurrentX = e.changedTouches[0].screenX;
            const deltaX = touchCurrentX - touchStartX;
            const containerWidth = carouselContainer.offsetWidth;
            // Convertir el movimiento del dedo a porcentaje del contenedor de slides
            const dragPercentage = (deltaX / containerWidth) * (100/3);
            
            // Aplicar transformaci√≥n en tiempo real siguiendo el dedo
            const newTransform = startTransform + dragPercentage;
            slidesContainer.style.transition = 'none'; // Sin transici√≥n durante el arrastre
            slidesContainer.style.transform = `translateX(${newTransform}%)`;
            
            // Feedback visual adicional: cambiar opacidad basado en la distancia del arrastre
            const dragIntensity = Math.min(Math.abs(deltaX) / containerWidth, 0.3);
            carouselContainer.style.filter = `brightness(${1 - dragIntensity * 0.2})`;
        }, { passive: true });
        
        carouselContainer.addEventListener('touchend', (e) => {
            if (!isDragging) return;
            
            isDragging = false;
            const swipeDistance = touchCurrentX - touchStartX;
            const containerWidth = carouselContainer.offsetWidth;
            const swipeThreshold = containerWidth * 0.25; // Aumentar umbral para reducir sensibilidad
            
            // Restaurar transici√≥n suave
            slidesContainer.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            
            // Restaurar efectos visuales
            carouselContainer.style.transform = 'scale(1)';
            carouselContainer.style.filter = 'brightness(1)';
            carouselContainer.style.transition = 'transform 0.3s ease, filter 0.3s ease';
            
            if (Math.abs(swipeDistance) > swipeThreshold) {
                if (swipeDistance > 0) {
                    // Deslizamiento hacia la derecha - slide anterior
                    const newIndex = currentSlideIndex > 0 ? currentSlideIndex - 1 : 2;
                    currentSlideIndex = newIndex;
                    slidesContainer.style.transform = `translateX(-${currentSlideIndex * (100/3)}%)`;
                } else {
                    // Deslizamiento hacia la izquierda - slide siguiente
                    const newIndex = currentSlideIndex < 2 ? currentSlideIndex + 1 : 0;
                    currentSlideIndex = newIndex;
                    slidesContainer.style.transform = `translateX(-${currentSlideIndex * (100/3)}%)`;
                }
                // Actualizar indicadores sin llamar showSlide para evitar conflictos
                updateIndicators();
                
                // Feedback visual de √©xito: breve pulso
                setTimeout(() => {
                    carouselContainer.style.transform = 'scale(1.02)';
                    setTimeout(() => {
                        carouselContainer.style.transform = 'scale(1)';
                    }, 100);
                }, 50);
            } else {
                // Volver a la posici√≥n original si no se alcanz√≥ el umbral
                slidesContainer.style.transform = `translateX(-${currentSlideIndex * (100/3)}%)`;
            }
            
            resetCarouselInterval();
        }, { passive: true });
        
        // Cancelar arrastre si se sale del √°rea
         carouselContainer.addEventListener('touchcancel', (e) => {
             if (isDragging) {
                 isDragging = false;
                 slidesContainer.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                 slidesContainer.style.transform = `translateX(-${currentSlideIndex * (100/3)}%)`;
                 
                 // Restaurar efectos visuales
                 carouselContainer.style.transform = 'scale(1)';
                 carouselContainer.style.filter = 'brightness(1)';
                 carouselContainer.style.transition = 'transform 0.3s ease, filter 0.3s ease';
                 
                 resetCarouselInterval();
             }
         }, { passive: true });
    }
    
    function showSlide(index) {
        const slides = document.querySelectorAll('.carousel-slide');
        const indicators = document.querySelectorAll('.indicator');
        const slidesContainer = document.querySelector('.carousel-slides');
        
        if (slides.length === 0) return;
        
        // Remover clase active de todos los slides e indicadores
        slides.forEach(slide => slide.classList.remove('active'));
        indicators.forEach(indicator => indicator.classList.remove('active'));
        
        // Asegurar que el √≠ndice est√© en el rango v√°lido
        if (index >= slides.length) {
            currentSlideIndex = 0;
        } else if (index < 0) {
            currentSlideIndex = slides.length - 1;
        } else {
            currentSlideIndex = index;
        }
        
        // Aplicar transformaci√≥n CSS para mostrar el slide correcto
        if (slidesContainer) {
            // Solo aplicar transici√≥n si no se est√° arrastrando
            if (!isDragging) {
                slidesContainer.style.transition = 'transform 0.5s ease-in-out';
            }
            // Con 3 slides en flexbox, cada slide ocupa 33.333% del contenedor
        slidesContainer.style.transform = `translateX(-${currentSlideIndex * (100/3)}%)`;
        }
        
        // Mostrar slide e indicador activos
        if (slides[currentSlideIndex]) {
            slides[currentSlideIndex].classList.add('active');
        }
        if (indicators[currentSlideIndex]) {
            indicators[currentSlideIndex].classList.add('active');
        }
    }
    
    function nextSlide() {
        showSlide(currentSlideIndex + 1);
        if (isAutoPlayActive) {
            startProgress();
        }
    }
    
    function previousSlide() {
        showSlide(currentSlideIndex - 1);
        if (isAutoPlayActive) {
            startProgress();
        }
    }
    
    function goToSlide(index) {
        showSlide(index);
        if (isAutoPlayActive) {
            startProgress();
        }
    }
    
    function updateIndicators() {
        const slides = document.querySelectorAll('.carousel-slide');
        const indicators = document.querySelectorAll('.indicator');
        
        // Remover clase active de todos los slides e indicadores
        slides.forEach(slide => slide.classList.remove('active'));
        indicators.forEach(indicator => indicator.classList.remove('active'));
        
        // Mostrar slide e indicador activos
        if (slides[currentSlideIndex]) {
            slides[currentSlideIndex].classList.add('active');
        }
        if (indicators[currentSlideIndex]) {
            indicators[currentSlideIndex].classList.add('active');
        }
    }
    
    function startCarouselInterval() {
        // Solo iniciar si el auto-play est√° activo
        if (!isAutoPlayActive) return;
        
        // Limpiar cualquier intervalo existente antes de crear uno nuevo
        if (carouselInterval) {
            clearInterval(carouselInterval);
        }
        
        startProgress();
        carouselInterval = setInterval(() => {
            nextSlide();
        }, autoPlayDuration);
    }

    // Funciones para el indicador de progreso SVG
    function startProgress() {
        const progressRing = document.querySelector('.progress-ring');
        const progressElement = document.querySelector('.progress-ring-progress');
        console.log('startProgress llamado, progressRing encontrado:', !!progressRing);
        if (progressRing && progressElement) {
            // Primero removemos la clase para detener cualquier animaci√≥n
            progressRing.classList.remove('active');
            
            // Resetear manualmente el stroke-dasharray al estado inicial
            progressElement.style.strokeDasharray = '0 100.53';
            
            // Forzamos un reflow para asegurar que los cambios se apliquen
            progressRing.offsetHeight;
            
            // Peque√±o delay para asegurar el reset completo
            setTimeout(() => {
                // Agregamos la clase nuevamente para iniciar la animaci√≥n
                progressRing.classList.add('active');
                console.log('Clase active agregada. Clases actuales:', progressRing.className);
                console.log('Indicador de progreso SVG iniciado');
            }, 10);
        } else {
            console.error('No se encontr√≥ el elemento .progress-ring o .progress-ring-progress');
        }
    }
    
    function stopProgress() {
        const progressRing = document.querySelector('.progress-ring');
        const progressElement = document.querySelector('.progress-ring-progress');
        console.log('stopProgress llamado, progressRing encontrado:', !!progressRing);
        if (progressRing && progressElement) {
            progressRing.classList.remove('active');
            // Resetear al estado inicial
            progressElement.style.strokeDasharray = '0 100.53';
            console.log('Clase active removida. Clases actuales:', progressRing.className);
            console.log('Indicador de progreso SVG detenido');
        } else {
            console.error('No se encontr√≥ el elemento .progress-ring o .progress-ring-progress');
        }
    }
    
    function setupVisibilityObserver() {
        const carouselContainer = document.querySelector('.carousel-container');
        if (!carouselContainer) return;
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // El carrusel es visible
                    isCarouselVisible = true;
                    
                    // Reanudar auto-play si estaba activo antes de ocultarse
                    if (wasAutoPlayActiveBeforeHidden && !isAutoPlayActive) {
                        isAutoPlayActive = true;
                        startCarouselInterval();
                        
                        // Actualizar elementos visuales y de accesibilidad
                        const playPauseIcon = document.getElementById('play-pause-icon');
                        const progressContainer = document.querySelector('.carousel-play-button');
                        const autoplayStatus = document.getElementById('autoplay-status');
                        
                        if (playPauseIcon) {
                            playPauseIcon.className = 'fas fa-pause';
                        }
                        if (progressContainer) {
                            progressContainer.setAttribute('aria-label', 'Pausar reproducci√≥n autom√°tica del carrusel');
                        }
                        if (autoplayStatus) {
                            autoplayStatus.textContent = 'Reproducci√≥n autom√°tica activa';
                        }
                    }
                } else {
                    // El carrusel no es visible
                    isCarouselVisible = false;
                    
                    // Pausar auto-play si est√° activo
                    if (isAutoPlayActive) {
                        wasAutoPlayActiveBeforeHidden = true;
                        stopCarouselInterval();
                        isAutoPlayActive = false;
                        
                        // Actualizar elementos visuales y de accesibilidad
                        const playPauseIcon = document.getElementById('play-pause-icon');
                        const progressContainer = document.querySelector('.carousel-play-button');
                        const autoplayStatus = document.getElementById('autoplay-status');
                        
                        if (playPauseIcon) {
                            playPauseIcon.className = 'fas fa-play';
                        }
                        if (progressContainer) {
                            progressContainer.setAttribute('aria-label', 'Reanudar reproducci√≥n autom√°tica del carrusel');
                        }
                        if (autoplayStatus) {
                            autoplayStatus.textContent = 'Reproducci√≥n autom√°tica pausada (carrusel no visible)';
                        }
                    }
                }
            });
        }, {
            threshold: 0.5, // El carrusel debe estar al menos 50% visible
            rootMargin: '0px 0px -50px 0px' // Margen adicional para activar antes
        });
        
        observer.observe(carouselContainer);
    }
    

    
    function toggleAutoPlay() {
        const playPauseIcon = document.getElementById('play-pause-icon');
        const progressContainer = document.querySelector('.carousel-play-button');
        const autoplayStatus = document.getElementById('autoplay-status');
        
        if (isAutoPlayActive) {
            // Pausar auto-play
            stopCarouselInterval();
            isAutoPlayActive = false;
            
            // Actualizar elementos visuales y de accesibilidad
            if (playPauseIcon) {
                playPauseIcon.className = 'fas fa-play';
            }
            if (progressContainer) {
                progressContainer.setAttribute('aria-label', 'Reanudar reproducci√≥n autom√°tica del carrusel');
            }
            if (autoplayStatus) {
                autoplayStatus.textContent = 'Reproducci√≥n autom√°tica pausada';
            }
        } else {
            // Reanudar auto-play
            isAutoPlayActive = true;
            startCarouselInterval();
            
            // Actualizar elementos visuales y de accesibilidad
            if (playPauseIcon) {
                playPauseIcon.className = 'fas fa-pause';
            }
            if (progressContainer) {
                progressContainer.setAttribute('aria-label', 'Pausar reproducci√≥n autom√°tica del carrusel');
            }
            if (autoplayStatus) {
                autoplayStatus.textContent = 'Reproducci√≥n autom√°tica activa';
            }
        }
    }
    
    function stopCarouselInterval() {
        if (carouselInterval) {
            clearInterval(carouselInterval);
            carouselInterval = null; // Resetear la variable
        }
        stopProgress();
    }
    
    function resetCarouselInterval() {
        stopCarouselInterval();
        startCarouselInterval();
    }
    
    // Inicializar carrusel
    initializeCarousel();

    // ==========================================
    // SISTEMA DE B√öSQUEDA INTELIGENTE
    // ==========================================

    // Base de datos de sugerencias y palabras clave
    const searchSuggestions = [
        { text: 'laptop', type: 'producto', icon: 'fas fa-laptop' },
        { text: 'notebook', type: 'producto', icon: 'fas fa-laptop' },
        { text: 'computadora', type: 'producto', icon: 'fas fa-desktop' },
        { text: 'gaming', type: 'categor√≠a', icon: 'fas fa-gamepad' },
        { text: 'asus', type: 'marca', icon: 'fas fa-tag' },
        { text: 'xbox', type: 'producto', icon: 'fab fa-xbox' },
        { text: 'consola', type: 'producto', icon: 'fas fa-gamepad' },
        { text: 'procesador', type: 'componente', icon: 'fas fa-microchip' },
        { text: 'memoria', type: 'componente', icon: 'fas fa-memory' },
        { text: 'ram', type: 'componente', icon: 'fas fa-memory' },
        { text: 'ssd', type: 'componente', icon: 'fas fa-hdd' },
        { text: 'disco', type: 'componente', icon: 'fas fa-hdd' },
        { text: 'gr√°fica', type: 'componente', icon: 'fas fa-tv' },
        { text: 'monitor', type: 'producto', icon: 'fas fa-desktop' },
        { text: 'teclado', type: 'accesorio', icon: 'fas fa-keyboard' },
        { text: 'mouse', type: 'accesorio', icon: 'fas fa-mouse' },
        { text: 'auriculares', type: 'accesorio', icon: 'fas fa-headphones' }
    ];

    // Variables para el sistema de b√∫squeda inteligente
    let searchHistory = JSON.parse(localStorage.getItem('searchHistory')) || [];
    let currentSuggestionIndex = -1;
    let filteredSuggestions = [];
    let searchTimeout;

    // Elementos del DOM para b√∫squeda inteligente (reutilizando searchInput ya definido)
    const suggestionsDropdown = document.getElementById('search-suggestions-dropdown');
    const suggestionsList = document.getElementById('suggestions-list');
    const historyList = document.getElementById('history-list');

    // Funci√≥n para guardar historial en localStorage
    function saveSearchHistory() {
        localStorage.setItem('searchHistory', JSON.stringify(searchHistory));
    }

    // Funci√≥n para agregar t√©rmino al historial
    function addToHistory(term) {
        // Remover si ya existe
        searchHistory = searchHistory.filter(item => item !== term);
        // Agregar al inicio
        searchHistory.unshift(term);
        // Mantener solo los √∫ltimos 10
        searchHistory = searchHistory.slice(0, 10);
        saveSearchHistory();
    }

    // Funci√≥n para remover t√©rmino del historial
    function removeFromHistory(term) {
        searchHistory = searchHistory.filter(item => item !== term);
        saveSearchHistory();
        updateHistoryDisplay();
    }

    // Funci√≥n para limpiar todo el historial
    function clearAllHistory() {
        // Agregar animaci√≥n de feedback al bot√≥n
        const clearBtn = document.getElementById('clear-all-history');
        if (clearBtn) {
            clearBtn.style.transform = 'scale(0.95)';
            clearBtn.style.opacity = '0.7';
            
            setTimeout(() => {
                clearBtn.style.transform = '';
                clearBtn.style.opacity = '';
            }, 150);
        }
        
        // Limpiar historial
        searchHistory = [];
        saveSearchHistory();
        updateHistoryDisplay();
        
        // Ocultar dropdown si no hay historial
        if (suggestionsDropdown.classList.contains('active')) {
            const query = searchInput.value.trim();
            if (!query || filterSuggestions(query).length === 0) {
                suggestionsDropdown.classList.remove('active');
            }
        }
    }

    // Funci√≥n para filtrar sugerencias
    function filterSuggestions(query) {
        if (!query || query.length < 1) return [];
        
        const lowerQuery = query.toLowerCase();
        return searchSuggestions.filter(suggestion => 
            suggestion.text.toLowerCase().includes(lowerQuery)
        ).slice(0, 6); // M√°ximo 6 sugerencias
    }

    // Funci√≥n para crear elemento de sugerencia
    function createSuggestionElement(suggestion, isHistory = false) {
        const item = document.createElement('div');
        item.className = 'suggestion-item';
        
        if (isHistory) {
            item.innerHTML = `
                <i class="suggestion-icon fas fa-history"></i>
                <span class="suggestion-text">${suggestion}</span>
                <i class="history-remove fas fa-times" data-term="${suggestion}"></i>
            `;
        } else {
            item.innerHTML = `
                <i class="suggestion-icon ${suggestion.icon}"></i>
                <span class="suggestion-text">${suggestion.text}</span>
                <span class="suggestion-type">${suggestion.type}</span>
            `;
        }
        
        return item;
    }

    // Funci√≥n para actualizar display de sugerencias
    function updateSuggestionsDisplay(query) {
        suggestionsList.innerHTML = '';
        
        if (!query || query.length < 1) {
            return;
        }

        filteredSuggestions = filterSuggestions(query);
        
        filteredSuggestions.forEach((suggestion, index) => {
            const item = createSuggestionElement(suggestion);
            item.addEventListener('click', () => {
                selectSuggestion(suggestion.text);
            });
            suggestionsList.appendChild(item);
        });
    }

    // Funci√≥n para actualizar display de historial
    function updateHistoryDisplay() {
        historyList.innerHTML = '';
        
        searchHistory.slice(0, 5).forEach(term => {
            const item = createSuggestionElement(term, true);
            
            // Click en el t√©rmino
            item.addEventListener('click', (e) => {
                if (!e.target.classList.contains('history-remove')) {
                    selectSuggestion(term);
                }
            });
            
            // Click en el bot√≥n de remover
            const removeBtn = item.querySelector('.history-remove');
            removeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                removeFromHistory(term);
            });
            
            historyList.appendChild(item);
        });
    }

    // Funci√≥n para seleccionar una sugerencia
    function selectSuggestion(text) {
        searchInput.value = text;
        hideSuggestions();
        // Disparar b√∫squeda autom√°ticamente
        searchForm.dispatchEvent(new Event('submit'));
    }

    // Funci√≥n para mostrar sugerencias
    function showSuggestions() {
        updateHistoryDisplay();
        suggestionsDropdown.classList.add('active');
    }

    // Funci√≥n para ocultar sugerencias
    function hideSuggestions() {
        suggestionsDropdown.classList.remove('active');
        currentSuggestionIndex = -1;
        clearHighlight();
    }

    // Funci√≥n para limpiar resaltado
    function clearHighlight() {
        const highlighted = suggestionsDropdown.querySelectorAll('.suggestion-item.highlighted');
        highlighted.forEach(item => item.classList.remove('highlighted'));
    }

    // Funci√≥n para resaltar sugerencia
    function highlightSuggestion(index) {
        clearHighlight();
        const allItems = suggestionsDropdown.querySelectorAll('.suggestion-item');
        if (allItems[index]) {
            allItems[index].classList.add('highlighted');
            allItems[index].scrollIntoView({ block: 'nearest' });
        }
    }

    // Funci√≥n para navegar con teclado
    function navigateWithKeyboard(direction) {
        const allItems = suggestionsDropdown.querySelectorAll('.suggestion-item');
        const totalItems = allItems.length;
        
        if (totalItems === 0) return;
        
        if (direction === 'down') {
            currentSuggestionIndex = (currentSuggestionIndex + 1) % totalItems;
        } else if (direction === 'up') {
            currentSuggestionIndex = currentSuggestionIndex <= 0 ? totalItems - 1 : currentSuggestionIndex - 1;
        }
        
        highlightSuggestion(currentSuggestionIndex);
    }

    // Funci√≥n para seleccionar sugerencia resaltada
    function selectHighlightedSuggestion() {
        const highlighted = suggestionsDropdown.querySelector('.suggestion-item.highlighted');
        if (highlighted) {
            const text = highlighted.querySelector('.suggestion-text').textContent;
            selectSuggestion(text);
        }
    }

    // Event listeners para el input de b√∫squeda
    searchInput.addEventListener('focus', () => {
        showSuggestions();
    });

    searchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();
        
        // Debounce para evitar demasiadas actualizaciones
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            updateSuggestionsDisplay(query);
            if (query.length > 0) {
                showSuggestions();
            }
        }, 150);
    });

    searchInput.addEventListener('keydown', (e) => {
        if (!suggestionsDropdown.classList.contains('active')) return;
        
        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                navigateWithKeyboard('down');
                break;
            case 'ArrowUp':
                e.preventDefault();
                navigateWithKeyboard('up');
                break;
            case 'Enter':
                if (currentSuggestionIndex >= 0) {
                    e.preventDefault();
                    selectHighlightedSuggestion();
                }
                break;
            case 'Escape':
                hideSuggestions();
                searchInput.blur();
                break;
        }
    });

    // Event listener para el bot√≥n de limpiar todo el historial
    const clearAllHistoryBtn = document.getElementById('clear-all-history');
    if (clearAllHistoryBtn) {
        clearAllHistoryBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Limpiar historial directamente
            clearAllHistory();
        });
    }

    // Ocultar sugerencias al hacer click fuera
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-container')) {
            hideSuggestions();
        }
    });

    // Configuraci√≥n del bot√≥n flotante "volver arriba"
    const backToTopBtn = document.getElementById('back-to-top-float');
    if (backToTopBtn) {
        backToTopBtn.addEventListener('click', (e) => {
            e.preventDefault();
            window.scrollTo({ top: 0, behavior: 'smooth' });
            backToTopBtn.classList.remove('visible');
            backToTopForceVisibleUntil = 0; // cancelar estado forzado
        });
    }
    // Mostrar/ocultar el bot√≥n seg√∫n scroll
    window.addEventListener('scroll', () => {
        if (!backToTopBtn) return;
        const isMobile = window.matchMedia('(max-width: 768px)').matches;

        // Ocultar cerca del tope siempre
        if (window.scrollY < 120) {
            backToTopBtn.classList.remove('visible');
            return;
        }

        // Si est√° forzado visible por interacci√≥n reciente, mantener visible
        if (backToTopForceVisibleUntil > Date.now()) {
            backToTopBtn.classList.add('visible');
            return;
        }

        if (isMobile) {
            const bottomDistance = document.documentElement.scrollHeight - (window.scrollY + window.innerHeight);
            // Mostrar autom√°ticamente cuando est√° a ~600px del final del contenido en m√≥viles
            if (bottomDistance < 600) {
                backToTopBtn.classList.add('visible');
            }
            // No ocultar si no est√° cerca del final, para respetar estados previos (p. ej., clic en c√≠rculos)
        } else {
            // Escritorio: mostrar cuando se alcance el 80% del documento (progreso de lectura)
            const docEl = document.documentElement;
            const scrolledBottom = window.scrollY + window.innerHeight;
            const progress = scrolledBottom / docEl.scrollHeight;

            if (progress >= 0.8) {
                backToTopBtn.classList.add('visible');
            } else {
                // Histeresis suave: si se baja bastante, ocultar
                if (progress < 0.75) {
                    backToTopBtn.classList.remove('visible');
                }
            }
        }
    });

    // Modificar el event listener del formulario existente para agregar al historial
    const originalSubmitHandler = searchForm.onsubmit;
    searchForm.addEventListener('submit', function(e) {
        const searchTerm = searchInput.value.trim();
        const skipHistory = searchForm?.dataset?.skipHistory === 'true';
        if (searchTerm) {
            if (!skipHistory) {
                addToHistory(searchTerm);
            }
            hideSuggestions();
        }
        // Limpiar flag para pr√≥ximos env√≠os
        if (skipHistory) {
            delete searchForm.dataset.skipHistory;
        }
    });

    // Inicializar display de historial
    updateHistoryDisplay();
    
    // Configurar observer de visibilidad para el carrusel
    setupVisibilityObserver();
    
    // Inicializar la secci√≥n de intereses (c√≠rculos)
    initInterestStrip();
    // Inicializar flechas de navegaci√≥n para la secci√≥n de intereses (m√≥viles)
    initInterestNav();
    // Oscurecer banda de intereses cuando se centra en pantalla
    initInterestFocusState();

    // Formatear etiquetas de intereses para m√≥viles (una palabra por l√≠nea)
    formatInterestLabelsForMobile();

    // Reaplicar formato al cambiar tama√±o de ventana
    window.addEventListener('resize', () => {
        // Peque√±o debounce para evitar llamadas excesivas
        clearTimeout(window.__formatLabelsResizeTimer);
        window.__formatLabelsResizeTimer = setTimeout(() => {
            formatInterestLabelsForMobile();
        }, 150);
    });

    // Configuraci√≥n del bot√≥n flotante "volver a destacados" (sector Gastronom√≠a)
    const backToFeaturedBtn = document.getElementById('back-to-featured-float');
    if (backToFeaturedBtn && document.body.classList.contains('sector-gastronomia')) {
        backToFeaturedBtn.addEventListener('click', (e) => {
            e.preventDefault();
            window.scrollTo({ top: 0, behavior: 'smooth' });
            backToFeaturedBtn.classList.remove('visible');
        });

        const interestProductsTitle = document.getElementById('interest-products-index-title');
        const interestProductsSection = interestProductsTitle ? interestProductsTitle.closest('.interest-products.searchable-section') : null;
        if (interestProductsSection) {
            // Mostrar solo cuando la secci√≥n "Recomendados por inter√©s" est√© en pantalla de forma estable
            const featuredObserver = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        backToFeaturedBtn.classList.add('visible');
                    } else {
                        backToFeaturedBtn.classList.remove('visible');
                    }
                });
            }, { threshold: 0.4, rootMargin: '0px 0px -30% 0px' });
            featuredObserver.observe(interestProductsSection);

            // Ajuste inicial por si se entra ya en la secci√≥n
            const y = window.scrollY;
            const top = interestProductsSection.offsetTop;
            const bottom = top + interestProductsSection.offsetHeight;
            if (y + window.innerHeight * 0.4 >= top && y <= bottom) {
                backToFeaturedBtn.classList.add('visible');
            } else {
                backToFeaturedBtn.classList.remove('visible');
            }
        }
    }

        // Minimizar y transportar t√≠tulo de Platos destacados
        if (document.body.classList.contains('sector-gastronomia')) {
            const featuredSection = document.getElementById('featured-dishes');
            const featuredTitle = document.getElementById('featured-dishes-title') || (featuredSection ? featuredSection.querySelector('.section-title') : null);
            const discountsWrapper = featuredSection ? featuredSection.querySelector('.discounts-wrapper') : null;

            if (featuredSection && featuredTitle) {
                let minimizeTimerId = null;
                let alreadyMinimized = false;

                const titleVisibilityObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (alreadyMinimized) return;
                        if (entry.isIntersecting) {
                            clearTimeout(minimizeTimerId);
                            minimizeTimerId = setTimeout(() => {
                                if (alreadyMinimized) return;
                                alreadyMinimized = true;

                                featuredSection.classList.add('title-collapsing');

                                featuredTitle.style.maxHeight = featuredTitle.offsetHeight + 'px';
                                void featuredTitle.offsetHeight;
                                featuredTitle.classList.add('fade-out');

                                let badge = document.getElementById('featured-dishes-badge');
                                if (!badge) {
                                    badge = document.createElement('div');
                                    badge.id = 'featured-dishes-badge';
                                    badge.className = 'featured-title-badge';
                                    badge.textContent = featuredTitle.textContent || 'Platos destacados';
                                    featuredSection.appendChild(badge);
                                }
                                badge.style.left = '16px';
                                const baseTop = discountsWrapper ? discountsWrapper.offsetTop : (featuredTitle.offsetTop || 0);
                                const initialOffset = Math.max(baseTop - (badge.offsetHeight || 0) - 8, 8);
                                badge.style.top = initialOffset + 'px';
                                requestAnimationFrame(() => {
                                    const badgeEl2 = document.getElementById('featured-dishes-badge');
                                    if (badgeEl2) badgeEl2.classList.add('appear');
                                });

                                featuredTitle.addEventListener('transitionend', (ev) => {
                                    if (ev.propertyName !== 'max-height') return;
                                    featuredTitle.style.visibility = 'hidden';
                                    requestAnimationFrame(() => {
                                        featuredTitle.style.display = 'none';
                                    });

                                    const badgeEl = document.getElementById('featured-dishes-badge');
                                    if (badgeEl) {
                                        requestAnimationFrame(() => {
                                            requestAnimationFrame(() => {
                                                const wrapperTopNow = discountsWrapper ? discountsWrapper.offsetTop : (featuredTitle.offsetTop || 0);
                                                const offsetNow = Math.max(wrapperTopNow - (badgeEl.offsetHeight || 0) - 8, 8);
                                                badgeEl.style.top = offsetNow + 'px';
                                            });
                                        });
                                    }

                                    featuredSection.classList.add('title-collapsed');
                                    featuredSection.classList.remove('title-collapsing');
                                }, { once: true });
                            }, 5000);
                        } else {
                            clearTimeout(minimizeTimerId);
                        }
                    });
                }, { threshold: 0.6 });

                titleVisibilityObserver.observe(featuredTitle);
            }
        }

        // Colapso suave del t√≠tulo del Men√∫ Gastronom√≠a y eliminaci√≥n del hueco
        const menuSection = document.getElementById('menu-gastronomia');
        const menuTitle = menuSection ? menuSection.querySelector('.section-title') : null;
        const menuGrid = menuSection ? menuSection.querySelector('.products-grid') : null;

        if (menuSection && menuTitle) {
            let menuMinimizeTimerId = null;
            let menuAlreadyMinimized = false;

            const menuTitleObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (menuAlreadyMinimized) return;
                    if (entry.isIntersecting) {
                        clearTimeout(menuMinimizeTimerId);
                        menuMinimizeTimerId = setTimeout(() => {
                            if (menuAlreadyMinimized) return;
                            menuAlreadyMinimized = true;

                            // Marcar estado de colapso para animar padding-top a 0
                            menuSection.classList.add('title-collapsing');

                            // Colapsar t√≠tulo midiendo altura actual y animando max-height
                            menuTitle.style.maxHeight = menuTitle.offsetHeight + 'px';
                            void menuTitle.offsetHeight;
                            menuTitle.classList.add('fade-out');

                            // Crear badge minimizado si no existe y posicionarlo
                            let menuBadge = document.getElementById('menu-gastronomia-badge');
                            if (!menuBadge) {
                                menuBadge = document.createElement('div');
                                menuBadge.id = 'menu-gastronomia-badge';
                                menuBadge.className = 'menu-title-badge';
                                menuBadge.textContent = menuTitle.textContent || 'Men√∫ principal';
                                menuSection.appendChild(menuBadge);
                            }
                            menuBadge.style.left = '16px';
                            if (menuGrid) {
                                const offset = Math.max(menuGrid.offsetTop - (menuBadge.offsetHeight || 0) - 8, 8);
                                menuBadge.style.top = offset + 'px';
                            } else {
                                menuBadge.style.top = (menuTitle.offsetTop + menuTitle.offsetHeight + 8) + 'px';
                            }
                            requestAnimationFrame(() => {
                                const badgeEl2 = document.getElementById('menu-gastronomia-badge');
                                if (badgeEl2) badgeEl2.classList.add('appear');
                            });

                            // Al terminar el colapso, ocultar visualmente y retirar del flujo
                            menuTitle.addEventListener('transitionend', (ev) => {
                                if (ev.propertyName !== 'max-height') return;
                                menuTitle.style.visibility = 'hidden';
                                requestAnimationFrame(() => {
                                    menuTitle.style.display = 'none';
                                });

                                // Recalcular posici√≥n final del badge tras estabilizar el layout
                                const badgeEl = document.getElementById('menu-gastronomia-badge');
                                if (badgeEl) {
                                    requestAnimationFrame(() => {
                                        requestAnimationFrame(() => {
                                            const wrapperTopNow = menuGrid ? menuGrid.offsetTop : (menuTitle.offsetTop || 0);
                                            const offsetNow = Math.max(wrapperTopNow - (badgeEl.offsetHeight || 0) - 8, 8);
                                            badgeEl.style.top = offsetNow + 'px';
                                        });
                                    });
                                }

                                // Limpiar y marcar estado colapsado
                                menuSection.classList.add('title-collapsed');
                                menuSection.classList.remove('title-collapsing');
                            }, { once: true });
                        }, 5000);
                    } else {
                        clearTimeout(menuMinimizeTimerId);
                    }
                });
            }, { threshold: 0.6 });

            menuTitleObserver.observe(menuTitle);
        }

    // Hacer funciones globales para acceso desde HTML
    window.toggleAutoPlay = toggleAutoPlay;
    window.scrollDiscounts = scrollDiscounts;
});

// Funci√≥n para navegar en la secci√≥n de descuentos
function scrollDiscounts(direction) {
    const container = document.querySelector('.discounts-container');
    const scrollAmount = 300; // Cantidad de p√≠xeles a desplazar
    
    if (direction === 'left') {
        container.scrollBy({
            left: -scrollAmount,
            behavior: 'smooth'
        });
    } else if (direction === 'right') {
        container.scrollBy({
            left: scrollAmount,
            behavior: 'smooth'
        });
    }
    
    // Actualizar estado de los botones despu√©s del scroll
    setTimeout(() => {
        updateDiscountNavButtons();
    }, 300);
}

// Formatear etiquetas de intereses en m√≥viles: una palabra por l√≠nea
function formatInterestLabelsForMobile() {
    const section = document.getElementById('interest-index');
    if (!section) return;

    const labels = section.querySelectorAll('.interest-label');
    const isMobile = window.matchMedia('(max-width: 768px)').matches;

    labels.forEach(label => {
        const originalText = label.dataset.originalLabel || label.textContent.trim();

        // Guardar texto original una sola vez
        if (!label.dataset.originalLabel) {
            label.dataset.originalLabel = originalText;
        }

        if (isMobile) {
            // Apilar palabras en m√≥viles
            const words = originalText.split(/\s+/).filter(Boolean);
            label.innerHTML = words.join('<br>');
        } else {
            // Restaurar texto original en pantallas grandes
            label.textContent = label.dataset.originalLabel || originalText;
        }
    });
}

// Funci√≥n para actualizar el estado de los botones de navegaci√≥n
function updateDiscountNavButtons() {
    const container = document.querySelector('.discounts-container');
    const prevBtn = document.querySelector('.discounts-nav-btn.prev');
    const nextBtn = document.querySelector('.discounts-nav-btn.next');
    
    if (!container || !prevBtn || !nextBtn) return;
    
    const isAtStart = container.scrollLeft <= 0;
    const isAtEnd = container.scrollLeft >= (container.scrollWidth - container.clientWidth - 1);
    
    prevBtn.disabled = isAtStart;
    nextBtn.disabled = isAtEnd;
}

// Inicializar estado de botones cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', () => {
    updateDiscountNavButtons();
    
    // Actualizar botones cuando se redimensiona la ventana
    window.addEventListener('resize', updateDiscountNavButtons);
    
    // Actualizar botones cuando se hace scroll manual
    const container = document.querySelector('.discounts-container');
    if (container) {
        container.addEventListener('scroll', updateDiscountNavButtons);
    }
    
    // Inicializar auto-scroll para descuentos
    initDiscountAutoScroll();
});

// Variables para el auto-scroll
let discountAutoScrollInterval;
let isDiscountAutoScrollPaused = false;

// Funci√≥n para inicializar el auto-scroll de descuentos
function initDiscountAutoScroll() {
    const container = document.querySelector('.discounts-container');
    const discountsWrapper = document.querySelector('.discounts-wrapper');
    
    if (!container || !discountsWrapper) return;
    
    // Funci√≥n para hacer auto-scroll
    function autoScrollDiscounts() {
        if (isDiscountAutoScrollPaused) return;
        
        const isAtEnd = container.scrollLeft >= (container.scrollWidth - container.clientWidth - 1);
        
        if (isAtEnd) {
            // Si llegamos al final, volver al inicio
            container.scrollTo({
                left: 0,
                behavior: 'smooth'
            });
        } else {
            // Continuar desplaz√°ndose hacia la derecha
            scrollDiscounts('right');
        }
    }
    
    // Iniciar el auto-scroll cada 5 segundos
    discountAutoScrollInterval = setInterval(autoScrollDiscounts, 5000);
    
    // Pausar auto-scroll al hacer hover sobre la secci√≥n
    discountsWrapper.addEventListener('mouseenter', () => {
        isDiscountAutoScrollPaused = true;
    });
    
    // Reanudar auto-scroll al salir del hover
    discountsWrapper.addEventListener('mouseleave', () => {
        isDiscountAutoScrollPaused = false;
    });
    
    // Pausar auto-scroll durante interacciones t√°ctiles en m√≥viles
    container.addEventListener('touchstart', () => {
        isDiscountAutoScrollPaused = true;
    });
    
    // Reanudar auto-scroll despu√©s de un tiempo sin interacci√≥n t√°ctil
    let touchTimeout;
    container.addEventListener('touchend', () => {
        clearTimeout(touchTimeout);
        touchTimeout = setTimeout(() => {
            isDiscountAutoScrollPaused = false;
        }, 3000); // Reanudar despu√©s de 3 segundos sin tocar
    });
    
    // Pausar auto-scroll cuando se usan los botones de navegaci√≥n
    const navButtons = document.querySelectorAll('.discounts-nav-btn');
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            isDiscountAutoScrollPaused = true;
            // Reanudar despu√©s de 5 segundos
            setTimeout(() => {
                isDiscountAutoScrollPaused = false;
            }, 5000);
        });
    });
}

// Funci√≥n para detener el auto-scroll (√∫til si se necesita)
function stopDiscountAutoScroll() {
    if (discountAutoScrollInterval) {
        clearInterval(discountAutoScrollInterval);
        discountAutoScrollInterval = null;
    }
}

// Funci√≥n para reanudar el auto-scroll
function resumeDiscountAutoScroll() {
    if (!discountAutoScrollInterval) {
        initDiscountAutoScroll();
    }
}

// Inicializar comportamiento para la secci√≥n de intereses
function getInterestProductMap() {
    const category = (document.body && document.body.dataset && document.body.dataset.category || '').toLowerCase();

    const baseMap = {
        '2x1': 'interest-product-2x1',
        'Liquidaciones': 'interest-product-liquidaciones',
        'Destacados': 'interest-product-destacados',
        'Nuevo': 'interest-product-nuevo',
        'M√°s vendidos': 'interest-product-mas-vendidos'
    };

    if (category === 'gastronomia') {
        return {
            '2x1': 'interest-product-2x1',
            'Liquidaciones': 'interest-product-liquidaciones',
            'Destacados': 'interest-product-destacados',
            'Nuevo': 'interest-product-nuevo',
            'M√°s vendidos': 'interest-product-mas-vendidos',
            'Entradas r√°pidas': 'interest-product-nuevo',
            'Promociones': 'interest-product-liquidaciones',
            'Especialidad de la casa': 'interest-product-destacados',
            'Combos': 'interest-product-mas-vendidos'
        };
    }

    return baseMap;
}

function initInterestStrip() {
    const items = document.querySelectorAll('.interest-item');
    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const clearSearchBtn = document.getElementById('clear-search-btn');
    const backToTopBtn = document.getElementById('back-to-top-float');

    // Mapeo de c√≠rculos de inter√©s a productos de ejemplo
    const interestProductMap = getInterestProductMap();

    if (!items.length || !searchForm || !searchInput) return;

    items.forEach(btn => {
        btn.addEventListener('click', () => {
            const term = (btn.getAttribute('data-term') || '').trim();
            if (!term) return;

            // Limpiar el campo de b√∫squeda para evitar confusiones
            searchInput.value = '';
            if (clearSearchBtn) clearSearchBtn.style.display = 'none';
            if (document.activeElement === searchInput) {
                searchInput.blur();
            }

            // No disparar b√∫squeda desde c√≠rculos; ocultar resultados y sugerencias
            const suggestionsDropdown = document.getElementById('search-suggestions-dropdown');
            if (suggestionsDropdown) {
                suggestionsDropdown.classList.remove('active');
            }
            const searchResultsSection = document.querySelector('.search-results');
            if (searchResultsSection) {
                searchResultsSection.classList.remove('active');
            }

            // Llevar la vista hacia la secci√≥n de productos
            const interestProductsSection = document.querySelector('.interest-products');
            const productsSection = document.querySelector('.products');
            (interestProductsSection || productsSection)?.scrollIntoView({ behavior: 'smooth', block: 'start' });

            // Desplazar y resaltar el producto de ejemplo asignado a este inter√©s (sin agregar al carrito)
            const mappedId = interestProductMap[term];
            if (mappedId) {
                const productCard = document.getElementById(mappedId);
                if (productCard) {
                    productCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    productCard.classList.add('interest-highlight');
                    setTimeout(() => {
                        productCard.classList.remove('interest-highlight');
                    }, 1600);
                    // Mostrar bot√≥n flotante para volver al inicio
                    if (backToTopBtn) {
                        backToTopForceVisibleUntil = Date.now() + 8000;
                        backToTopBtn.classList.add('visible');
                        // Ocultar despu√©s de un tiempo si no se usa
                        setTimeout(() => {
                            backToTopForceVisibleUntil = 0;
                            backToTopBtn.classList.remove('visible');
                        }, 8000);
                    }
                }
            }
        });
    });
}

// Navegaci√≥n con flechas para la secci√≥n de intereses en m√≥viles
function initInterestNav() {
    const section = document.getElementById('interest-index');
    if (!section) return;

    const strip = section.querySelector('.interest-strip');
    const prevBtn = section.querySelector('.interest-nav-btn.prev');
    const nextBtn = section.querySelector('.interest-nav-btn.next');
    if (!strip || !prevBtn || !nextBtn) return;

    function isMobile() {
        return window.matchMedia('(max-width: 768px)').matches;
    }

    // Mostrar/ocultar flechas seg√∫n ancho
    function syncVisibility() {
        const visible = isMobile();
        prevBtn.style.display = visible ? 'flex' : 'none';
        nextBtn.style.display = visible ? 'flex' : 'none';
        updateState();
    }

    // Actualizar estado de botones (disabled al inicio/fin)
    function updateState() {
        const atStart = strip.scrollLeft <= 1;
        const atEnd = (strip.scrollLeft + strip.clientWidth) >= (strip.scrollWidth - 1);
        prevBtn.disabled = atStart;
        nextBtn.disabled = atEnd;
        prevBtn.classList.toggle('disabled', atStart);
        nextBtn.classList.toggle('disabled', atEnd);
        // Mostrar fades seg√∫n contenido disponible
        section.classList.toggle('has-left', !atStart);
        section.classList.toggle('has-right', !atEnd);
    }

    // Al presionar, intentar mostrar todos los elementos no visibles
    function scrollInterest(direction) {
        if (direction === 'right') {
            const remainingRight = strip.scrollWidth - (strip.scrollLeft + strip.clientWidth);
            const amount = Math.max(strip.clientWidth, remainingRight);
            strip.scrollTo({ left: strip.scrollLeft + amount, behavior: 'smooth' });
        } else {
            const remainingLeft = strip.scrollLeft;
            const amount = Math.max(strip.clientWidth, remainingLeft);
            strip.scrollTo({ left: Math.max(0, strip.scrollLeft - amount), behavior: 'smooth' });
        }
        setTimeout(updateState, 320);
    }

    prevBtn.addEventListener('click', () => scrollInterest('left'));
    nextBtn.addEventListener('click', () => scrollInterest('right'));

    strip.addEventListener('scroll', updateState);

    // Debounce para resize
    let resizeTimer;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(syncVisibility, 150);
    });

    // Inicializar visibilidad y estado
    syncVisibility();
}

// Enfoque visual para la secci√≥n de intereses: oscurecer al centrarse en viewport
function initInterestFocusState() {
    const interestSection = document.getElementById('interest-index');
    if (!interestSection) return;

    let prevIntensity = 0;
    const clamp01 = (v) => Math.min(1, Math.max(0, v));
    const easeOutCubic = (t) => 1 - Math.pow(1 - t, 3);

    const updateInterestFocusState = () => {
        const rect = interestSection.getBoundingClientRect();
        const viewportCenterY = window.innerHeight / 2;
        const sectionCenterY = rect.top + rect.height / 2;
        const distance = Math.abs(sectionCenterY - viewportCenterY);
        const visible = rect.top < window.innerHeight && rect.bottom > 0;

        // Arranque m√°s temprano y suavizado: de startThreshold (inicio) a fullThreshold (centro)
        const startThreshold = Math.min(window.innerHeight * 0.45, 320);
        const fullThreshold  = Math.min(window.innerHeight * 0.18, 140);

        let rawIntensity = 0;
        if (visible) {
            if (distance <= fullThreshold) {
                rawIntensity = 1;
            } else if (distance >= startThreshold) {
                rawIntensity = 0;
            } else {
                // Mapea linealmente entre startThreshold y fullThreshold
                rawIntensity = 1 - ((distance - fullThreshold) / (startThreshold - fullThreshold));
            }
        }

        // Suavizado con ease-out y peque√±o blending para evitar saltos
        const eased = easeOutCubic(clamp01(rawIntensity));
        const blended = prevIntensity + (eased - prevIntensity) * 0.25;

        // Actualiza variables CSS (opacidades de overlay)
        interestSection.style.setProperty('--focus-linear', (0.26 * blended).toFixed(3));
        interestSection.style.setProperty('--focus-radial', (0.16 * blended).toFixed(3));

        // Box-shadow sutil cuando hay algo de intensidad
        interestSection.classList.toggle('focused', blended > 0.08);
        prevIntensity = blended;
    };

    let tickingFocus = false;
    const onScrollOrResize = () => {
        if (!tickingFocus) {
            tickingFocus = true;
            requestAnimationFrame(() => {
                updateInterestFocusState();
                tickingFocus = false;
            });
        }
    };

    window.addEventListener('scroll', onScrollOrResize, { passive: true });
    window.addEventListener('resize', onScrollOrResize);
    // Evaluaci√≥n inicial
    updateInterestFocusState();
}